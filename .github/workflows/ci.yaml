name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  packages: write
  id-token: write # in case you add cloud auth later

env:
  PYTHON_VERSION: "3.11"

jobs:
  build-core:
    name: Build C++ Core
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system deps
        run: sudo apt-get update && sudo apt-get install -y cmake build-essential

      - name: Setup ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/core/**') }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Build core
        run: |
          cd core
          mkdir -p build && cd build
          cmake ..
          cmake --build . -- -j$(nproc)

      - name: Run C++ tests (if any)
        run: |
          if [ -d core/build ]; then
            cd core/build
            ctest --output-on-failure
          fi

  python-tests:
    name: Python Unit Tests (control-plane)
    runs-on: ubuntu-latest
    needs: build-core
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/control-plane/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r control-plane/requirements.txt

      - name: Run pytest (control-plane)
        working-directory: control-plane
        run: |
          pytest -q --maxfail=1

  integration-tests:
    name: Integration - docker-compose smoke tests
    runs-on: ubuntu-latest
    needs: [python-tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx & QEMU
        uses: docker/setup-buildx-action@v3

      - name: Start dev stack (docker-compose)
        working-directory: dev
        run: |
          docker compose up --build -d
          # Wait for control-plane to be healthy (up to ~60s)
          for i in $(seq 1 30); do
            if curl -sSf http://localhost:8000/health >/dev/null 2>&1; then
              echo "control-plane is up"
              break
            fi
            echo "waiting for control-plane... ($i)"
            sleep 2
          done
          curl -sSf http://localhost:8000/health

      - name: Run integration smoke tests (if present)
        run: |
          if [ -d control-plane/tests ]; then
            pytest -q control-plane/tests || (docker compose down && exit 1)
          fi

      - name: Tear down dev stack
        if: always()
        working-directory: dev
        run: docker compose down --volumes --remove-orphans

  build-and-push:
    name: Build & Push Images (main only)
    runs-on: ubuntu-latest
    needs: [build-core, python-tests, integration-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v4
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push control-plane image
        run: |
          docker build -f docker/control-plane.Dockerfile -t ghcr.io/${{ github.repository_owner }}/athena-control-plane:latest .
          docker push ghcr.io/${{ github.repository_owner }}/athena-control-plane:latest

      - name: Build & push core image
        run: |
          docker build -f docker/athena-core.Dockerfile -t ghcr.io/${{ github.repository_owner }}/athena-core:latest .
          docker push ghcr.io/${{ github.repository_owner }}/athena-core:latest
