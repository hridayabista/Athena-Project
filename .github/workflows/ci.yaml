# .github/workflows/ci.yaml
name: Athena CI

on:
  push:
    branches: ["develop", "main"]
  pull_request:
    branches: ["develop", "main"]

permissions:
  contents: read
  packages: write
  id-token: write
  pull-requests: write

jobs:
  # -----------------------------
  # Build the C++ core (CMake)
  # -----------------------------
  build-core:
    name: Build C++ core
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config protobuf-compiler libprotobuf-dev libprotoc-dev libgrpc++-dev git

      - name: Configure & build
        working-directory: athena/core
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          cmake --build . -- -j$(nproc)

      - name: Run C++ tests
        working-directory: athena/core/build
        run: |
          if [ -f CTestTestfile.cmake ] || [ -d tests ]; then
            ctest --output-on-failure || true
          fi

  # -----------------------------
  # Python control-plane tests
  # -----------------------------
  python-tests:
    name: Python tests (control-plane)
    runs-on: ubuntu-latest
    needs: build-core
    strategy:
      matrix:
        python-version: [3.11]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r athena/control_plane/requirements.txt
          python -m pip install pytest grpcio grpcio-tools protobuf

      - name: Generate python gRPC stubs
        run: |
          mkdir -p athena/control_plane/proto
          python -m grpc_tools.protoc -Iathena/core/proto --python_out=athena/control_plane/proto --grpc_python_out=athena/control_plane/proto athena/core/proto/inference.proto

      - name: Run pytest (control-plane)
        working-directory: athena/control_plane
        run: |
          pytest -q

  # -----------------------------
  # Frontend build (Next.js)
  # -----------------------------
  frontend-build:
    name: Frontend Build (Next.js)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: athena-ui/package-lock.json

      - name: Install dependencies (frontend)
        working-directory: athena-ui
        run: npm ci

      - name: Lint (optional)
        working-directory: athena-ui
        run: |
          if npm run -s lint; then echo "lint ok"; else echo "lint failed but continuing"; fi

      - name: Build Next.js
        working-directory: athena-ui
        run: npm run build

  # -----------------------------
  # Build & push Docker images (only on main)
  # -----------------------------
  build-and-push:
    name: Build & Push Docker Images (GHCR)
    runs-on: ubuntu-latest
    needs: [build-core, python-tests, frontend-build]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR
        uses: docker/login-action@v4
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT || github.token }}
      - name: Build and push control-plane image
        run: |
          docker build -f athena/docker/control-plane.Dockerfile -t ghcr.io/${{ github.repository_owner }}/athena-control-plane:latest .
          docker push ghcr.io/${{ github.repository_owner }}/athena-control-plane:latest
      - name: Build and push core image
        run: |
          docker build -f athena/docker/athena-core.Dockerfile -t ghcr.io/${{ github.repository_owner }}/athena-core:latest .
          docker push ghcr.io/${{ github.repository_owner }}/athena-core:latest
